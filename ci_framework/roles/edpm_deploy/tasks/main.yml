---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Set EDPM related vars
  tags:
    - always
  ansible.builtin.set_fact:
    cifmw_edpm_deploy_env: "{{ cifmw_install_yamls_environment | combine({'PATH': cifmw_path }) }}"
    cacheable: true

- name: Deploy EDPM
  vars:
    make_edpm_deploy_env: "{{ cifmw_edpm_deploy_env }}"
    make_edpm_deploy_dryrun: "{{ cifmw_edpm_deploy_dryrun | bool }}"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_edpm_deploy'

- name: Wait for EDPM compute deployment to finish
  when:
    - not cifmw_edpm_deploy_dryrun | bool
  environment:
    PATH: "{{ cifmw_path }}"
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
  block:
    - name: Get info about dataplane node
      ci_script:
        output_dir: "{{ cifmw_edpm_deploy_basedir }}/artifacts"
        script: |-
          oc get openstackdataplane -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}
          oc get openstackdataplanerole -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}
          oc get openstackdataplanenode -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}
          oc get pods -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }} | grep edpm
      ignore_errors: true

    - name: Get EDPM nova deployment pod name
      register: edpm_pod
      ansible.builtin.shell:
        cmd: >-
          oc get pods -o name
          -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }} |
          grep -m1  {{ cifmw_edpm_deploy_nova_pod_name }}
      until: edpm_pod.rc == 0
      retries: "{{ cifmw_edpm_deploy_retries }}"
      delay: 50

    - name: Wait for EDPM nova deployment pod to finish
      register: deploy_status
      ansible.builtin.command:
        cmd: >-
          oc wait -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}
          --timeout=0 --for=jsonpath='{.status.phase}'=Succeeded
          {{ edpm_pod.stdout |trim }}
      until: deploy_status.rc == 0
      retries: "{{ cifmw_edpm_deploy_retries }}"
      delay: 20

- name: Get the logs of EDPM Deploy
  when:
    - deploy_status is defined
    - "'rc' in deploy_status"
    - deploy_status.rc == 0
  environment:
    PATH: "{{ cifmw_path }}"
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
  ansible.builtin.shell: |
    for POD in $(oc get pods -o name -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }} | egrep "dataplane-deployment-|nova-edpm-compute");
    do
      echo $POD;
      oc logs -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }} $POD;
    done
  register: edpm_logs

- name: Collect logs for EDPM deploy
  when:
    - edpm_logs is defined
    - "'rc' in edpm_logs"
    - edpm_logs.rc == 0
  block:
    - name: Check for edpm logs directory
      ansible.builtin.file:
        path: "{{ cifmw_edpm_deploy_log_path | dirname }}"
        state: directory

    - name: Collect EDPM deploy logs
      ansible.builtin.copy:
        mode: 0644
        content: "{{ edpm_logs.stdout }}"
        dest: "{{ cifmw_edpm_deploy_log_path }}"

- name: Validate EDPM
  when: cifmw_edpm_deploy_run_validation | bool
  vars:
    make_edpm_deploy_instance_env: "{{ cifmw_edpm_deploy_env }}"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_edpm_deploy_instance'
