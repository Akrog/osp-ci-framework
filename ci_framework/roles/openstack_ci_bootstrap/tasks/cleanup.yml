---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Load infra resources from file
  when: cifmw_ocb_resources is not defined
  ansible.builtin.include_vars:
    file: "{{ ansible_user_dir }}/ci-framework-data/artifacts/infra-resources.yml"

- name: Delete instances
  environment:
    OS_CLOUD: "{{ cifmw_ocb_net_cloud_name }}"
  when: >-
    cifmw_ocb_resources is defined and
    'instances' in cifmw_ocb_resources
  register: cifmw_ocb_cleanup_server_delete_stdout
  ansible.builtin.command:
    cmd: "openstack server delete {{ item.id }}"
  failed_when: >-
    cifmw_ocb_cleanup_server_delete_stdout.rc != 0 and
    (not 'no server with a name or id' in cifmw_ocb_cleanup_server_delete_stdout.stderr | lower)
  changed_when: cifmw_ocb_cleanup_server_delete_stdout.rc == 0
  loop: "{{ cifmw_ocb_resources['instances'] }}"
  loop_control:
    label: "{{ item.name }}"

- name: Delete floating IPs
  environment:
    OS_CLOUD: "{{ cifmw_ocb_net_cloud_name }}"
  when: >-
    cifmw_ocb_resources is defined and
    'fips' in cifmw_ocb_resources
  register: cifmw_ocb_cleanup_fip_delete_stdout
  ansible.builtin.command:
    cmd: "openstack floating ip delete {{ item.id }}"
  failed_when: >-
    cifmw_ocb_cleanup_fip_delete_stdout.rc != 0 and
    (not 'no floatingip found' in cifmw_ocb_cleanup_fip_delete_stdout.stderr | lower)
  changed_when: cifmw_ocb_cleanup_fip_delete_stdout.rc == 0
  loop: "{{ cifmw_ocb_resources['fips'] }}"
  loop_control:
    label: "{{ item.floating_ip_address }}"

- name: Fetch router info for further port removals
  environment:
    OS_CLOUD: "{{ cifmw_ocb_net_cloud_name }}"
  when: >-
    cifmw_ocb_resources is defined and
    'router' in cifmw_ocb_resources
  register: cifmw_ocb_cleanup_router_info_out
  ansible.builtin.command:
    cmd: "openstack router show -f yaml {{ cifmw_ocb_resources['router'].id }}"
  failed_when: >-
    cifmw_ocb_cleanup_router_info_out.rc != 0 and
    (not 'no router found' in cifmw_ocb_cleanup_router_info_out.stderr | lower)
  changed_when: false

- name: Remove router related resources
  environment:
    OS_CLOUD: "{{ cifmw_ocb_net_cloud_name }}"
  when: cifmw_ocb_cleanup_router_info_out.rc == 0
  block:
    - name: Cleanup router ports
      vars:
        router_ports: >-
          {{
            (cifmw_ocb_cleanup_router_info_out.stdout | from_yaml).interfaces_info
          }}
      when: not cifmw_ocb_cleanup_router_info_out.skipped | default(false)
      ansible.builtin.command:
        cmd: >-
          openstack router remove port
          {{ cifmw_ocb_resources['router'].id }}
          {{ item.port_id }}
      loop: "{{ router_ports }}"

    - name: Delete router
      when: >-
        cifmw_ocb_resources is defined and
        'router' in cifmw_ocb_resources
      ansible.builtin.command:
        cmd: "openstack router delete {{ cifmw_ocb_resources['router'].id }}"

- name: Fetch remaining ports
  environment:
    OS_CLOUD: "{{ cifmw_ocb_net_cloud_name }}"
  register: cifmw_ocb_cleanup_ports_info_out
  when: >-
    cifmw_ocb_resources is defined and
    'network' in cifmw_ocb_resources
  ansible.builtin.command:
    cmd: >-
      openstack port list
      -f yaml
      --network {{ cifmw_ocb_resources['network'].id }}
  failed_when: >-
    cifmw_ocb_cleanup_ports_info_out.rc != 0 and
    (not 'no network found' in cifmw_ocb_cleanup_ports_info_out.stderr | lower)
  changed_when: false

- name: Delete remaining ports
  environment:
    OS_CLOUD: "{{ cifmw_ocb_net_cloud_name }}"
  when: "(not cifmw_ocb_cleanup_ports_info_out.skipped | default(false))"
  ansible.builtin.command:
    cmd: "openstack port delete {{ item.ID }}"
  loop: >-
    {{
      (cifmw_ocb_cleanup_ports_info_out.stdout | from_yaml)
      if cifmw_ocb_cleanup_ports_info_out.stdout != "" else []
    }}

- name: Delete subnet
  environment:
    OS_CLOUD: "{{ cifmw_ocb_net_cloud_name }}"
  when: >-
    cifmw_ocb_resources is defined and
    'subnetwork' in cifmw_ocb_resources
  register: cifmw_ocb_cleanup_subnet_out
  ansible.builtin.command:
    cmd: "openstack subnet delete {{ cifmw_ocb_resources['subnetwork'].id }}"
  failed_when: >-
    cifmw_ocb_cleanup_subnet_out.rc != 0 and
    (not 'no subnet found' in cifmw_ocb_cleanup_subnet_out.stderr | lower)
  changed_when: cifmw_ocb_cleanup_subnet_out.rc == 0

- name: Delete network
  environment:
    OS_CLOUD: "{{ cifmw_ocb_net_cloud_name }}"
  when: >-
    cifmw_ocb_resources is defined and
    'network' in cifmw_ocb_resources
  register: cifmw_ocb_cleanup_network_stdout
  ansible.builtin.command:
    cmd: "openstack network delete {{ cifmw_ocb_resources['network'].id }}"
  failed_when: >-
    cifmw_ocb_cleanup_network_stdout.rc != 0 and
    (not 'no network found' in cifmw_ocb_cleanup_network_stdout.stderr | lower)
  changed_when: cifmw_ocb_cleanup_network_stdout.rc == 0
